import os
import logging
from dotenv import load_dotenv
from telegram import Update, ForceReply, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext, CallbackQueryHandler
from pymongo import MongoClient
from datetime import datetime
import re

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

load_dotenv()
TELEGRAM_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_USER_ID = int(os.getenv('ADMIN_USER_ID'))
MONGODB_URI = os.getenv('MONGODB_URI')
MONGODB_DB = os.getenv('MONGODB_DB')

client = MongoClient(MONGODB_URI)
db = client[MONGODB_DB]
messages_collection = db['messages']
blocked_users_collection = db['blocked_users']

async def start(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    await update.message.reply_html(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –Ø –ø–µ—Ä–µ–¥–∞–º –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–ª–∞–¥–µ–ª—å—Ü—É. "
        f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –µ–≥–æ –ø–µ—Ä–µ—à–ª—é.",
        reply_markup=ForceReply(selective=True),
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} (@{user.username}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    # –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫—Ç–æ –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞
    try:
        if user.id != ADMIN_USER_ID:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"üì¢ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞:\n"
                     f"üë§ {user.first_name} {user.last_name or ''} (@{user.username or '–±–µ–∑ username'})\n"
                     f"üÜî ID: {user.id}"
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ {user.id}")
        else:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤–∞–º–∏ (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º)."
            )
            logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")

async def handle_message(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    message = update.message
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} (@{user.username})")
    
    if blocked_users_collection.find_one({"user_id": user.id}):
        logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        return
    
    message_data = {
        "user_id": user.id,
        "username": user.username or "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        "first_name": user.first_name or "",
        "last_name": user.last_name or "",
        "message_id": message.message_id,
        "text": message.text or "",
        "caption": message.caption or "",
        "date": datetime.now(),
        "file_id": None,
        "file_type": None
    }
    
    file_id = None
    file_type = None
    
    if message.photo:
        file_id = message.photo[-1].file_id
        file_type = 'photo'
    elif message.document:
        file_id = message.document.file_id
        file_type = 'document'
    elif message.video:
        file_id = message.video.file_id
        file_type = 'video'
    elif message.voice:
        file_id = message.voice.file_id
        file_type = 'voice'
    elif message.audio:
        file_id = message.audio.file_id
        file_type = 'audio'
    elif message.sticker:
        file_id = message.sticker.file_id
        file_type = 'sticker'
    
    message_data["file_id"] = file_id
    message_data["file_type"] = file_type
    
    result = messages_collection.insert_one(message_data)
    message_id_in_db = result.inserted_id
    logger.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å ID: {message_id_in_db}")
    
    user_info = f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} {user.last_name or ''} (@{user.username or '–±–µ–∑ username'})\nüÜî ID: {user.id}"
    
    keyboard = [
        [
            InlineKeyboardButton("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{user.id}"),
            InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{user.id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    try:
        if file_id:
            if file_type == 'photo':
                await context.bot.send_photo(
                    chat_id=int(ADMIN_USER_ID),
                    photo=file_id,
                    caption=f"{user_info}\n\n–ü—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ" + (f" —Å —Ç–µ–∫—Å—Ç–æ–º: {message.caption}" if message.caption else ""),
                    reply_markup=reply_markup  # Ensure reply buttons are always present
                )
                logger.info(f"–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            elif file_type == 'document':
                await context.bot.send_document(
                    chat_id=int(ADMIN_USER_ID),
                    document=file_id,
                    caption=f"{user_info}\n\n–ü—Ä–∏—Å–ª–∞–ª –¥–æ–∫—É–º–µ–Ω—Ç" + (f" —Å —Ç–µ–∫—Å—Ç–æ–º: {message.caption}" if message.caption else ""),
                    reply_markup=reply_markup  # Ensure reply buttons are always present
                )
                logger.info(f"–î–æ–∫—É–º–µ–Ω—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–µ—Ä–µ—Å–ª–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            elif file_type == 'video':
                await context.bot.send_video(
                    chat_id=int(ADMIN_USER_ID),
                    video=file_id,
                    caption=f"{user_info}\n\n–ü—Ä–∏—Å–ª–∞–ª –≤–∏–¥–µ–æ" + (f" —Å —Ç–µ–∫—Å—Ç–æ–º: {message.caption}" if message.caption else ""),
                    reply_markup=reply_markup  # Ensure reply buttons are always present
                )
                logger.info(f"–í–∏–¥–µ–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–µ—Ä–µ—Å–ª–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            elif file_type == 'voice':
                await context.bot.send_voice(
                    chat_id=int(ADMIN_USER_ID),
                    voice=file_id,
                    caption=f"{user_info}\n\n–ü—Ä–∏—Å–ª–∞–ª –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                    reply_markup=reply_markup  # Ensure reply buttons are always present
                )
                logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            elif file_type == 'audio':
                await context.bot.send_audio(
                    chat_id=int(ADMIN_USER_ID),
                    audio=file_id,
                    caption=f"{user_info}\n\n–ü—Ä–∏—Å–ª–∞–ª –∞—É–¥–∏–æ" + (f" —Å —Ç–µ–∫—Å—Ç–æ–º: {message.caption}" if message.caption else ""),
                    reply_markup=reply_markup  # Ensure reply buttons are always present
                )
                logger.info(f"–ê—É–¥–∏–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
            elif file_type == 'sticker':
                # Send message first with reply buttons
                await context.bot.send_message(
                    chat_id=int(ADMIN_USER_ID),
                    text=f"{user_info}\n\n–ü—Ä–∏—Å–ª–∞–ª —Å—Ç–∏–∫–µ—Ä:",
                    reply_markup=reply_markup  # Ensure reply buttons are always present
                )
                # Then send the sticker separately
                await context.bot.send_sticker(
                    chat_id=int(ADMIN_USER_ID),
                    sticker=file_id
                )
                logger.info(f"–°—Ç–∏–∫–µ—Ä –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–µ—Ä–µ—Å–ª–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        else:
            sent_message = await context.bot.send_message(
                chat_id=int(ADMIN_USER_ID),
                text=f"{user_info}\n\nüìù –°–æ–æ–±—â–µ–Ω–∏–µ: {message.text or '[–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]'}",
                reply_markup=reply_markup
            )
            logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} –ø–µ—Ä–µ—Å–ª–∞–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É, message_id: {sent_message.message_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
        try:
            await context.bot.send_message(
                chat_id=int(ADMIN_USER_ID),
                text=f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id}:\n{str(e)}"
            )
        except Exception as inner_e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ: {str(inner_e)}")
    
    try:
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—ã–ª–æ –ø–µ—Ä–µ–¥–∞–Ω–æ.")
        logger.info(f"–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.id}: {str(e)}")

async def get_messages(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å (–∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∏–∑ callback query)
        if update.callback_query:
            await update.callback_query.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        else:
            await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /messages")
        return
    
    args = context.args
    limit = 10 
    if args and args[0].isdigit():
        limit = int(args[0])
    
    latest_messages = list(messages_collection.find().sort("date", -1).limit(limit))
    
    if not latest_messages:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
        if update.callback_query:
            await update.callback_query.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        else:
            await update.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞ –Ω–µ—Ç.")
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π: —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç")
        return
    
    response = "üì¨ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
    for idx, msg in enumerate(latest_messages, 1):
        username = msg.get("username", "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if username == "–ù–µ—Ç –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è":
            username = f"{msg.get('first_name', '')} {msg.get('last_name', '')}"
            if username.strip() == "":
                username = f"ID: {msg['user_id']}"
        
        if msg.get("file_type"):
            text = f"[{msg.get('file_type', '–≤–ª–æ–∂–µ–Ω–∏–µ')}]" + (f" —Å —Ç–µ–∫—Å—Ç–æ–º: {msg.get('caption', '')[:30]}" if msg.get('caption') else "")
        else:
            text = msg.get("text", "") or "[–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"
        
        response += f"{idx}. üïí {msg['date'].strftime('%d.%m.%Y %H:%M')}\n"
        response += f"üë§ {username} (ID: {msg['user_id']})\n"
        response += f"üìù {text[:50]}{'...' if len(text) > 50 else ''}\n\n"
    
    # –°–æ–∑–¥–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    message_buttons = []
    for idx, msg in enumerate(latest_messages, 1):
        if len(message_buttons) < 5:  # –ü–æ 5 –∫–Ω–æ–ø–æ–∫ –≤ —Ä—è–¥—É
            message_buttons.append(InlineKeyboardButton(f"{idx}", callback_data=f"view_msg_{str(msg['_id'])}"))
        else:
            keyboard.append(message_buttons)
            message_buttons = [InlineKeyboardButton(f"{idx}", callback_data=f"view_msg_{str(msg['_id'])}")]
    
    if message_buttons:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
        keyboard.append(message_buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    keyboard.append([
        InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_messages"),
        InlineKeyboardButton("üîç –ë–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data=f"more_messages_{limit}")
    ])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –∑–∞–ø—Ä–æ—Å
    if update.callback_query:
        await update.callback_query.message.reply_text(response, reply_markup=reply_markup)
    else:
        await update.message.reply_text(response, reply_markup=reply_markup)
    
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ {limit} —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω")

async def view_message(update: Update, context: CallbackContext, message_id_str: str) -> None:
    try:
        from bson import ObjectId
        message = messages_collection.find_one({"_id": ObjectId(message_id_str)})
        
        if not message:
            await update.callback_query.message.reply_text("–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å ID {message_id_str}")
            return
        
        username = message.get("username") or f"{message.get('first_name', '')} {message.get('last_name', '')}"
        if username.strip() == "":
            username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {message['user_id']}"
        
        detail_text = f"üìù –î–µ—Ç–∞–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:\n\n"
        detail_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}\n"
        detail_text += f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message['user_id']}\n"
        detail_text += f"üïí –î–∞—Ç–∞: {message['date'].strftime('%d.%m.%Y %H:%M:%S')}\n"
        
        file_id = message.get("file_id")
        file_type = message.get("file_type")
        
        if file_type:
            detail_text += f"üìé –¢–∏–ø —Ñ–∞–π–ª–∞: {file_type}\n"
            if message.get("caption"):
                detail_text += f"üìÑ –ü–æ–¥–ø–∏—Å—å: {message['caption']}\n"
        else:
            detail_text += f"üìÑ –¢–µ–∫—Å—Ç: {message['text']}\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"reply_{message['user_id']}")],
            [InlineKeyboardButton("üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"block_{message['user_id']}")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_messages")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {message_id_str} —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–µ—Ç–∞–ª—è–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
        message_with_buttons = await update.callback_query.message.reply_text(detail_text, reply_markup=reply_markup)
        
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞—Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
        if file_id:
            try:
                if file_type == 'photo':
                    await context.bot.send_photo(
                        chat_id=update.callback_query.message.chat_id,
                        photo=file_id,
                        caption="üì∑ –§–æ—Ç–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
                    )
                elif file_type == 'document':
                    await context.bot.send_document(
                        chat_id=update.callback_query.message.chat_id,
                        document=file_id,
                        caption="üìÑ –î–æ–∫—É–º–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
                    )
                elif file_type == 'video':
                    await context.bot.send_video(
                        chat_id=update.callback_query.message.chat_id,
                        video=file_id,
                        caption="üé• –í–∏–¥–µ–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
                    )
                elif file_type == 'voice':
                    await context.bot.send_voice(
                        chat_id=update.callback_query.message.chat_id,
                        voice=file_id,
                        caption="üé§ –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
                    )
                elif file_type == 'audio':
                    await context.bot.send_audio(
                        chat_id=update.callback_query.message.chat_id,
                        audio=file_id,
                        caption="üéµ –ê—É–¥–∏–æ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è"
                    )
                elif file_type == 'sticker':
                    await context.bot.send_sticker(
                        chat_id=update.callback_query.message.chat_id,
                        sticker=file_id
                    )
                logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–¥–∏–∞—Ñ–∞–π–ª —Ç–∏–ø–∞ {file_type} –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {message_id_str}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {str(e)}")
                await update.callback_query.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞: {str(e)}")
        
        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {message_id_str} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–æ–±—â–µ–Ω–∏–∏: {str(e)}")
        await update.callback_query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def block_user(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /block")
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /block"
        )
        return
    
    args = context.args
    if not args or not args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /block 123456789")
        return
    
    user_id = int(args[0])
    
    if not messages_collection.find_one({"user_id": user_id}):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
        return
    
    if blocked_users_collection.find_one({"user_id": user_id}):
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
        return
    
    blocked_users_collection.insert_one({
        "user_id": user_id,
        "blocked_by": user.id,
        "blocked_at": datetime.now()
    })
    
    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")

async def unblock_user(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /unblock")
        await context.bot.send_message(
            chat_id=ADMIN_USER_ID,
            text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /unblock"
        )
        return
    
    args = context.args
    if not args or not args[0].isdigit():
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /unblock 123456789")
        return
    
    user_id = int(args[0])
    result = blocked_users_collection.delete_one({"user_id": user_id})
    
    if result.deleted_count > 0:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
    else:
        await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")

async def get_blocked_users(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /blocked")
        try:
            await context.bot.send_message(
                chat_id=ADMIN_USER_ID,
                text=f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /blocked"
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: {str(e)}")
        return
    
    try:
        blocked_users = list(blocked_users_collection.find())
        
        if not blocked_users:
            await update.message.reply_text("–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç.")
            logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç")
            return
        
        response = "üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
        
        for i, user_data in enumerate(blocked_users, 1):
            user_info = messages_collection.find_one({"user_id": user_data["user_id"]})
            username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            if user_info:
                if user_info.get("username"):
                    username = f"@{user_info['username']}"
                else:
                    username = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}"
                    if username.strip() == "":
                        username = f"ID: {user_data['user_id']}"
            
            blocked_at = user_data["blocked_at"].strftime("%d.%m.%Y %H:%M")
            user_id = user_data["user_id"]
            
            response += f"{i}. üë§ {username}\n"
            response += f"üÜî ID: `{user_id}`\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            response += f"‚è±Ô∏è –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {blocked_at}\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å ID –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        keyboard = []
        row = []
        for i, user_data in enumerate(blocked_users, 1):
            user_id = user_data["user_id"]
            if len(row) < 2:  # –ü–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
                row.append(InlineKeyboardButton(
                    f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ID: {user_id}",
                    callback_data=f"unblock_{user_id}"
                ))
            else:
                keyboard.append(row)
                row = [InlineKeyboardButton(
                    f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å ID: {user_id}",
                    callback_data=f"unblock_{user_id}"
                )]
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
            keyboard.append(row)
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(response, reply_markup=reply_markup, parse_mode="Markdown")
        logger.info("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")
        await update.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {str(e)}")

async def button_callback(update: Update, context: CallbackContext) -> None:
    query = update.callback_query
    await query.answer()
    data = query.data
    
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –∑–∞–ø—Ä–æ—Å: {data}")
    
    if data.startswith("block_"):
        user_id = int(data.split("_")[1])
        
        if blocked_users_collection.find_one({"user_id": user_id}):
            await query.message.reply_text(text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
            return
        
        blocked_users_collection.insert_one({
            "user_id": user_id,
            "blocked_by": ADMIN_USER_ID,
            "blocked_at": datetime.now()
        })
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await query.message.reply_text(text=f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
    
    elif data.startswith("unblock_"):
        user_id = int(data.split("_")[1])
        result = blocked_users_collection.delete_one({"user_id": user_id})
        
        if result.deleted_count > 0:
            await query.message.reply_text(text=f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode="Markdown")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        else:
            await query.message.reply_text(text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.", parse_mode="Markdown")
            logger.warning(f"–ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id}")
    
    elif data.startswith("reply_"):
        user_id = int(data.split("_")[1])
        context.user_data["reply_to"] = user_id
        
        user_info = messages_collection.find_one({"user_id": user_id})
        username = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        if user_info:
            if user_info.get("username"):
                username = f"@{user_info['username']}"
            else:
                username = f"{user_info.get('first_name', '')} {user_info.get('last_name', '')}"
                if username.strip() == "":
                    username = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID: {user_id}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
        await query.message.reply_text(f"‚úèÔ∏è –¢–µ–ø–µ—Ä—å –≤—ã –æ—Ç–≤–µ—á–∞–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {username} (ID: {user_id}).\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        logger.info(f"–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
    
    elif data.startswith("view_msg_"):
        message_id_str = data.split("_")[2]
        logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {message_id_str}")
        await view_message(update, context, message_id_str)
        logger.info(f"–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è —Å ID {message_id_str} –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    elif data == "back_to_messages":
        logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π")
        context.args = []  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π (10)
        await get_messages(update, context)
        logger.info("–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω")
        
    elif data == "refresh_messages":
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        logger.info("–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π")
        context.args = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
        await get_messages(update, context)
        logger.info("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    
    elif data.startswith("more_messages_"):
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        try:
            current_limit = int(data.split("_")[2])
            new_limit = current_limit + 10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞ 10
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–æ–≤—ã–π –ª–∏–º–∏—Ç: {new_limit})")
            context.args = [str(new_limit)]
            await get_messages(update, context)
            logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ –±–æ–ª—å—à–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—ã–ø–æ–ª–Ω–µ–Ω (–ª–∏–º–∏—Ç: {new_limit})")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {str(e)}")
            await query.message.reply_text(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")

async def cancel(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –ø—ã—Ç–∞–ª—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ /cancel")
        return
    
    if "reply_to" in context.user_data:
        del context.user_data["reply_to"]
        await update.message.reply_text("–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω.")
        logger.info("–†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        await update.message.reply_text("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –æ—Ç–≤–µ—Ç–∞.")

async def admin_reply(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    if user.id != ADMIN_USER_ID:
        return
    
    if "reply_to" not in context.user_data:
        return
    
    user_id = context.user_data["reply_to"]
    message = update.message
    
    try:
        if message.photo:
            await context.bot.send_photo(
                chat_id=user_id,
                photo=message.photo[-1].file_id,
                caption=message.caption or "–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        elif message.document:
            await context.bot.send_document(
                chat_id=user_id,
                document=message.document.file_id,
                caption=message.caption or "–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        elif message.video:
            await context.bot.send_video(
                chat_id=user_id,
                video=message.video.file_id,
                caption=message.caption or "–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        elif message.voice:
            await context.bot.send_voice(
                chat_id=user_id,
                voice=message.voice.file_id,
                caption="–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        elif message.audio:
            await context.bot.send_audio(
                chat_id=user_id,
                audio=message.audio.file_id,
                caption=message.caption or "–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"
            )
        elif message.sticker:
            await context.bot.send_sticker(
                chat_id=user_id,
                sticker=message.sticker.file_id
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {message.text}"
            )
        
        del context.user_data["reply_to"]
        await update.message.reply_text(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (ID: {user_id}).")
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å ID {user_id}")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")

def main() -> None:
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    
    # Command handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("messages", get_messages))
    application.add_handler(CommandHandler("block", block_user))
    application.add_handler(CommandHandler("unblock", unblock_user))
    application.add_handler(CommandHandler("blocked", get_blocked_users))
    application.add_handler(CommandHandler("cancel", cancel))
    
    # Callback query handler
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Message handlers
    application.add_handler(MessageHandler(
        filters.USER & filters.ChatType.PRIVATE & ~filters.COMMAND & filters.User(ADMIN_USER_ID),
        admin_reply
    ))
    
    application.add_handler(MessageHandler(
        filters.USER & filters.ChatType.PRIVATE & ~filters.COMMAND,
        handle_message
    ))
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. ADMIN_USER_ID —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {ADMIN_USER_ID}")
    
    application.run_polling()

if __name__ == "__main__":
    main()